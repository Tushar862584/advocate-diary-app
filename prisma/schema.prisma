generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cases     Case[]
  notes     Note[]
  uploads   Upload[]
  personalInfo   PersonalInfo?
}

model Case {
  id               String       @id @default(uuid())
  caseType         String
  registrationYear Int
  registrationNum  Int
  title            String
  courtName        String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  userId           String
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  hearings         Hearing[]
  notes            Note[]
  petitioners      Petitioner[]
  respondents      Respondent[]
  uploads          Upload[]
  isCompleted      Boolean      @default(false)

  @@unique([caseType, registrationYear, registrationNum])
}

model Petitioner {
  id       String  @id @default(uuid())
  name     String
  advocate String?
  caseId   String
  case     Case    @relation(fields: [caseId], references: [id], onDelete: Cascade)
}

model Respondent {
  id       String  @id @default(uuid())
  name     String
  advocate String?
  caseId   String
  case     Case    @relation(fields: [caseId], references: [id], onDelete: Cascade)
}

model Note {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  caseId    String
  userId    String?
  case      Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Hearing {
  id          String    @id @default(uuid())
  date        DateTime
  notes       String?
  nextDate    DateTime?
  nextPurpose String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  caseId      String
  case        Case      @relation(fields: [caseId], references: [id], onDelete: Cascade)
}

model Upload {
  id        String   @id @default(uuid())
  fileName  String
  fileUrl   String
  fileType  String
  createdAt DateTime @default(now())
  caseId    String?
  userId    String?
  case      Case?    @relation(fields: [caseId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model PersonalInfo {
  id            String   @id @default(uuid())
  address       String?
  city          String?
  state         String?
  zipCode       String?
  phoneNumber   String?
  dateOfBirth   DateTime?
  idNumber      String?  // For bar association ID, government ID, etc.
  notes         String?
  profileImage  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relation to User
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
}
